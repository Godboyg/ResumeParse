const express = require("express");
const app = express();
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");
const textModel = require("./db/mongoose");
const axios = require('axios');
const pdfParse = require('pdf-parse');
const cookie = require("cookie");
const { GoogleGenerativeAI } = require("@google/generative-ai");
require('dotenv').config();

const PORT = 5000;

const Secret = "jhadvsuykasgfuywgaekufya";

app.use(bodyParser.json());

app.get("/",(req,res)=>{
    res.send("hello");
})

const HARD_CODED_CREDENTIALS = {
    username: "naval.ravikant",
    password: "05111974"
};

// Middleware to verify JWT
const verifyToken = (req, res, next) => {
    // const token = req.header('Authorization')?.replace('Bearer ', '');

    const token = req.cookies.auth_token;

    if (!token) {
        return res.status(403).json({ message: 'Access denied. No token provided.' });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid or expired token.' });
    }
};

app.get('/protected', verifyToken, (req, res) => {
    res.json({ message: 'This is a protected route!', user: req.user });
});

async function extractTextFromPdf(pdfBuffer) {
    try {
        const data = await pdfParse(pdfBuffer);
        return data.text;
    } catch (err) {
        throw new Error('Error extracting text from PDF: ' + err.message);
    }
}

app.post("/login",(req,res)=>{

    const { username , password } = req.body;

    if( username === HARD_CODED_CREDENTIALS.username && password === HARD_CODED_CREDENTIALS.password ){

        const token = jwt.sign({ username },  Secret ,  { expiresIn: '1h' });

        // res.status(200).json({ message: 'Authentication successful', token });
        // res.cookie("token",token);

        res.setHeader('Set-Cookie', cookie.serialize('auth_token', token, {
            httpOnly: true,
            sameSite: 'Strict', // Prevent CSRF
            maxAge: 60 * 60, // Token expires in 1 hour
            path: '/' // Available throughout the app
          }));

        return res.status(200).json({ message: 'Authentication successful', token });
        // res.status(200).json({ message: 'Authentication successful', token });
    }
    else{
        res.status(401).json({ message: 'Invalid credentials' });
    }
})

app.post('/extract-text', async (req, res) => {
    const { pdfUrl } = req.body;

    if (!pdfUrl) {
        return res.status(400).json({ message: 'PDF URL is required' });
    }

    try {
        const response = await axios.get(pdfUrl, { responseType: 'arraybuffer' });

        if(!response){
            return res.status(500);
        }

        const extractedText = await extractTextFromPdf(response.data);

        const genAI = new GoogleGenerativeAI(process.env.API_KEY);
        const model = genAI.getGenerativeModel({ model : "gemini-2.0-flash" });

        const promt = `Extract the following information from the given raw text and return it in JSON format. The required fields are name,email,education,experience,
        summary,skills

         raw text: "${extractedText}"

         Return or store the data in the following format: 

         {
  "name": <name>,
  "email": <email>,
  "education":
    {
      "degree": <degree>,
      "branch" : <branch>,
      "institution": <institution>,
      "year": <year>
    },
  "experience": 
    {
      "job_title": <job_title>,
      "company": <company>,
      "start_date": <start_date>,
      "end_date": <end_date>
    },
    "summary" <write a short summary about the candidate profile - generated by LLM based on resume data >,
  "skills": [
    <skill_1>,
    <skill_2>,
    ...
  ]
}
         `;

        const result = await model.generateContent(promt);

        console.log(result.response.candidates[0].content.parts[0].text);
        const dbData = result.response.candidates[0].content.parts[0].text;

        const jsonString = dbData.replace(/^```json\n/, '').replace(/\n```$/, '');

        const parsedData = JSON.parse(jsonString);
        console.log("parsedData",parsedData); 

        const newData = new textModel(parsedData);

        await newData.save();

        res.status(200).json({ message: 'Text extracted and stored successfully', newData  });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Failed to extract and store text', error: err.message });
    }
});

app.post("/search",async(req,res)=>{

    const { query } = req.body;

    if (!query) {
        return res.status(200).json();
    }

    const searchResume = await textModel.find({
        name: { $regex: query, $options: 'i' }
    })

    res.json({searchResume});
})

app.listen(PORT,()=>{
    console.log(`server connected ${PORT}`);
})